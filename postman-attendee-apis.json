{
  "name": "👥 Attendee APIs",
  "item": [
    {
      "name": "🔍 Event Discovery",
      "item": [
        {
          "name": "Browse Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events?page=1&limit=20&status=published",
              "host": ["{{baseUrl}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "status",
                  "value": "published"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has events array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.events).to.be.an('array');",
                  "    if (response.data.events.length > 0) {",
                  "        pm.collectionVariables.set('eventId', response.data.events[0].id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/search?keywords=tech&category=technology&location=San Francisco&startDate=2024-06-01&isFree=false",
              "host": ["{{baseUrl}}"],
              "path": ["events", "search"],
              "query": [
                {
                  "key": "keywords",
                  "value": "tech"
                },
                {
                  "key": "category",
                  "value": "technology"
                },
                {
                  "key": "location",
                  "value": "San Francisco"
                },
                {
                  "key": "startDate",
                  "value": "2024-06-01"
                },
                {
                  "key": "isFree",
                  "value": "false"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has search results', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.events).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Event Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has event details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.event).to.have.property('id');",
                  "    pm.expect(response.data.event.id).to.equal(pm.collectionVariables.get('eventId'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Event by Slug",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/slug/tech-conference-2024",
              "host": ["{{baseUrl}}"],
              "path": ["events", "slug", "tech-conference-2024"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has event by slug', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.event).to.have.property('slug');",
                  "    pm.expect(response.data.event.slug).to.equal('tech-conference-2024');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Browse Categories",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": ["{{baseUrl}}"],
              "path": ["categories"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has categories', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.categories).to.be.an('array');",
                  "    if (response.data.categories.length > 0) {",
                  "        pm.collectionVariables.set('categoryId', response.data.categories[0].id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📅 Booking Management",
      "item": [
        {
          "name": "Create Booking",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"ticketQuantity\": 2,\n  \"attendeeInfo\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"{{attendeeEmail}}\",\n    \"phoneNumber\": \"+1234567890\"\n  },\n  \"specialRequests\": \"Vegetarian meal preference\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has booking data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.booking).to.have.property('id');",
                  "    pm.collectionVariables.set('bookingId', response.data.booking.id);",
                  "    if (response.data.paymentIntent) {",
                  "        pm.collectionVariables.set('paymentId', response.data.paymentIntent.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Bookings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/bookings?page=1&limit=10&status=confirmed",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "confirmed"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user bookings', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.bookings).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Booking Details",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has booking details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.booking.id).to.equal(pm.collectionVariables.get('bookingId'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Cancel Booking",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms cancellation', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.message).to.include('cancelled');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "💳 Payment Processing",
      "item": [
        {
          "name": "Create Payment Intent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookingId\": \"{{bookingId}}\",\n  \"amount\": 19998,\n  \"currency\": \"usd\",\n  \"paymentMethod\": \"card\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments/create-intent",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "create-intent"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has payment intent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.paymentIntent).to.have.property('id');",
                  "    pm.collectionVariables.set('paymentId', response.data.paymentIntent.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Payment History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/payments/history?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "history"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has payment history', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.payments).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📱 QR Code & Validation",
      "item": [
        {
          "name": "Get Booking QR Code",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/qr-codes/booking/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["qr-codes", "booking", "{{bookingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has booking QR code', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.qrCode).to.have.property('code');",
                  "    pm.expect(response.data.qrCode.bookingId).to.equal(pm.collectionVariables.get('bookingId'));",
                  "    pm.collectionVariables.set('qrCode', response.data.qrCode.code);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validate QR Code",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"qrCode\": \"{{qrCode}}\",\n  \"eventId\": \"{{eventId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/qr-codes/validate",
              "host": ["{{baseUrl}}"],
              "path": ["qr-codes", "validate"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response validates QR code', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.validation.isValid).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔔 Notifications",
      "item": [
        {
          "name": "Get User Notifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/notifications?page=1&limit=10&unreadOnly=false",
              "host": ["{{baseUrl}}"],
              "path": ["notifications"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "unreadOnly",
                  "value": "false"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has notifications', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.notifications).to.be.an('array');",
                  "    if (response.data.notifications.length > 0) {",
                  "        pm.collectionVariables.set('notificationId', response.data.notifications[0].id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Notification Preferences",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"emailNotifications\": true,\n  \"smsNotifications\": false,\n  \"pushNotifications\": true,\n  \"eventReminders\": true,\n  \"bookingConfirmations\": true,\n  \"paymentReceipts\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/notifications/preferences",
              "host": ["{{baseUrl}}"],
              "path": ["notifications", "preferences"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response confirms preferences update', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.preferences.emailNotifications).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔍 Search & Discovery",
      "item": [
        {
          "name": "Search Events with Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/search/events?query=tech&category=technology&location=San Francisco&startDate=2024-06-01&endDate=2024-12-31&priceMin=0&priceMax=200&isVirtual=false&hasAvailableSpots=true",
              "host": ["{{baseUrl}}"],
              "path": ["search", "events"],
              "query": [
                {
                  "key": "query",
                  "value": "tech"
                },
                {
                  "key": "category",
                  "value": "technology"
                },
                {
                  "key": "location",
                  "value": "San Francisco"
                },
                {
                  "key": "startDate",
                  "value": "2024-06-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                },
                {
                  "key": "priceMin",
                  "value": "0"
                },
                {
                  "key": "priceMax",
                  "value": "200"
                },
                {
                  "key": "isVirtual",
                  "value": "false"
                },
                {
                  "key": "hasAvailableSpots",
                  "value": "true"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has search results', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.events).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Trending Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/search/trending?limit=10&period=week",
              "host": ["{{baseUrl}}"],
              "path": ["search", "trending"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "period",
                  "value": "week"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has trending events', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.events).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Nearby Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/search/nearby?latitude=37.7749&longitude=-122.4194&radius=50&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["search", "nearby"],
              "query": [
                {
                  "key": "latitude",
                  "value": "37.7749"
                },
                {
                  "key": "longitude",
                  "value": "-122.4194"
                },
                {
                  "key": "radius",
                  "value": "50"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has nearby events', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.events).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}

