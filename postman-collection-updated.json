{
  "info": {
    "name": "Event Management Platform - Role-Based API Collection",
    "description": "Complete test suite organized by user roles (Public, Attendee, Organizer, Admin) with direct API Gateway endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://r2nbmrglq6.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Main API Gateway (Health Check only)"
    },
    {
      "key": "eventsApiUrl",
      "value": "https://a5sma74inf.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Events API Gateway"
    },
    {
      "key": "bookingsApiUrl",
      "value": "https://bxmcilkslg.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Bookings API Gateway"
    },
    {
      "key": "paymentsApiUrl",
      "value": "https://rmjz94rovg.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Payments API Gateway"
    },
    {
      "key": "qrCodesApiUrl",
      "value": "https://tvww3bv8t5.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "QR Codes API Gateway"
    },
    {
      "key": "analyticsApiUrl",
      "value": "https://9l0qlqw46a.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Analytics API Gateway"
    },
    {
      "key": "userPoolId",
      "value": "ca-central-1_NgK0SDL4T",
      "type": "string"
    },
    {
      "key": "userPoolClientId",
      "value": "2bbu335cjoe2afm71kjedbn86l",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "",
      "type": "string"
    },
    {
      "key": "bookingId",
      "value": "",
      "type": "string"
    },
    {
      "key": "verificationToken",
      "value": "",
      "type": "string"
    }
  ],

  "item": [
    {
      "name": "üîç Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üë§ User Management",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"username\": \"testuser\",\n  \"password\": \"TestPassword123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"phoneNumber\": \"+1234567890\",\n  \"acceptTerms\": true,\n  \"marketingConsent\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.user) {",
                  "        pm.collectionVariables.set('userId', response.data.user.id);",
                  "        pm.collectionVariables.set('userEmail', response.data.user.email);",
                  "        pm.collectionVariables.set('username', response.data.user.username);",
                  "        pm.collectionVariables.set('userRole', response.data.user.role);",
                  "        console.log('‚úÖ User registered successfully:', response.data.user.id);",
                  "        console.log('üìß Email:', response.data.user.email);",
                  "        console.log('üë§ Role:', response.data.user.role);",
                  "        console.log('‚ö†Ô∏è  Note: User needs email verification to login');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Registration failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"tkhtechinc@gmail.com\",\n  \"password\": \"Campus2020$\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        // Set user information",
                  "        pm.collectionVariables.set('userId', response.data.user.id);",
                  "        pm.collectionVariables.set('userEmail', response.data.user.email);",
                  "        pm.collectionVariables.set('username', response.data.user.username);",
                  "        pm.collectionVariables.set('userRole', response.data.user.role);",
                  "        ",
                  "        // Set authentication tokens",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "        ",
                  "        console.log('‚úÖ Login successful!');",
                  "        console.log('üë§ User ID:', response.data.user.id);",
                  "        console.log('üìß Email:', response.data.user.email);",
                  "        console.log('üîë Access Token:', response.data.accessToken.substring(0, 20) + '...');",
                  "        console.log('üîÑ Refresh Token:', response.data.refreshToken.substring(0, 20) + '...');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Login failed:', pm.response.text());",
                  "    if (pm.response.code === 401) {",
                  "        console.log('üí° Tip: Check if user account is active and email is verified');",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "        console.log('‚úÖ Token refreshed successfully!');",
                  "        console.log('üîë New Access Token:', response.data.accessToken.substring(0, 20) + '...');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Token refresh failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"tkhtechinc@gmail.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Password reset email sent!');",
                  "        console.log('üìß Check email for reset link');",
                  "        console.log('üí° Note: Reset token is logged in CloudWatch for development');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Password reset failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Confirm Password Reset",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"your-reset-token-here\",\n  \"newPassword\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/confirm-reset",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "confirm-reset"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Password reset confirmed successfully!');",
                  "        console.log('üîê You can now login with the new password');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Password reset confirmation failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"code\": \"your-verification-code-here\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-email"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Email verified successfully!');",
                  "        console.log('üë§ User can now login');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Email verification failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Resend Email Verification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/resend-email-verification/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "resend-email-verification", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Email verification resent!');",
                  "        console.log('üìß Check email for verification link');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Resend verification failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ User profile retrieved successfully!');",
                  "        console.log('üë§ User:', response.data.user.firstName, response.data.user.lastName);",
                  "        console.log('üìß Email:', response.data.user.email);",
                  "        console.log('‚úÖ Email Verified:', response.data.user.emailVerified);",
                  "        console.log('üì± Status:', response.data.user.status);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get profile failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"phoneNumber\": \"+1234567890\",\n  \"profileImageUrl\": \"https://example.com/avatar.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Profile updated successfully!');",
                  "        console.log('üë§ Updated Name:', response.data.user.firstName, response.data.user.lastName);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Profile update failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÖ Event Management (Public)",
      "item": [
        {
          "name": "Get All Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Events retrieved successfully!');",
                  "        console.log('üìä Total Events:', response.data.events.length);",
                  "        console.log('üìÑ Page:', response.data.pagination.page);",
                  "        console.log('üìã Total Pages:', response.data.pagination.totalPages);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get events failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Event by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Event retrieved successfully!');",
                  "        console.log('üìÖ Title:', response.data.event.title);",
                  "        console.log('üìç Location:', response.data.event.location.city);",
                  "        console.log('üí∞ Price:', response.data.event.ticketPrice);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get event failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üé™ Organizer APIs (Requires Organizer Role)",
      "item": [
        {
          "name": "Create Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Event\",\n  \"description\": \"This is a test event\",\n  \"category\": \"technology\",\n  \"startDate\": \"2024-12-31T18:00:00Z\",\n  \"endDate\": \"2024-12-31T22:00:00Z\",\n  \"location\": {\n    \"address\": \"123 Test Street\",\n    \"city\": \"Test City\",\n    \"state\": \"Test State\",\n    \"zipCode\": \"12345\",\n    \"country\": \"Test Country\"\n  },\n  \"capacity\": 100,\n  \"ticketPrice\": 25.00,\n  \"isPublic\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events",
              "host": ["{{baseUrl}}"],
              "path": ["events"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.event) {",
                  "        pm.collectionVariables.set('eventId', response.data.event.id);",
                  "        console.log('‚úÖ Event created successfully:', response.data.event.id);",
                  "        console.log('üìÖ Title:', response.data.event.title);",
                  "        console.log('üìç Location:', response.data.event.location.city);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Event creation failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Events retrieved successfully!');",
                  "        console.log('üìä Total Events:', response.data.events.length);",
                  "        console.log('üìÑ Page:', response.data.pagination.page);",
                  "        console.log('üìã Total Pages:', response.data.pagination.totalPages);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get events failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Event by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Event retrieved successfully!');",
                  "        console.log('üìÖ Title:', response.data.event.title);",
                  "        console.log('üìç Location:', response.data.event.location.city);",
                  "        console.log('üí∞ Price:', response.data.event.ticketPrice);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get event failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Event",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Event Title\",\n  \"description\": \"Updated event description\",\n  \"capacity\": 150,\n  \"ticketPrice\": 30.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Event updated successfully!');",
                  "        console.log('üìÖ Updated Title:', response.data.event.title);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Event update failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Event",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Event deleted successfully!');",
                  "} else {",
                  "    console.log('‚ùå Event deletion failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get My Events (Organizer)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events/organizer?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["events", "organizer"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Organizer events retrieved successfully!');",
                  "        console.log('üìä My Events:', response.data.events.length);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get organizer events failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üé´ Attendee APIs (Requires Attendee Role)",
      "item": [
        {
          "name": "Create Booking",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"ticketType\": \"general\",\n  \"quantity\": 2,\n  \"attendeeInfo\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john@example.com\"\n    },\n    {\n      \"firstName\": \"Jane\",\n      \"lastName\": \"Smith\",\n      \"email\": \"jane@example.com\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.booking) {",
                  "        pm.collectionVariables.set('bookingId', response.data.booking.id);",
                  "        console.log('‚úÖ Booking created successfully:', response.data.booking.id);",
                  "        console.log('üé´ Tickets:', response.data.booking.quantity);",
                  "        console.log('üí∞ Total Amount:', response.data.booking.totalAmount);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Booking creation failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Bookings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings/user",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "user"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ User bookings retrieved successfully!');",
                  "        console.log('üìä Total Bookings:', response.data.bookings.length);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get user bookings failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get My Bookings (Attendee)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings/user",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "user"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ User bookings retrieved successfully!');",
                  "        console.log('üìä Total Bookings:', response.data.bookings.length);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get user bookings failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Cancel Booking",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Booking cancelled successfully!');",
                  "} else {",
                  "    console.log('‚ùå Booking cancellation failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üëë Admin APIs (Requires Admin Role)",
      "item": [
        {
          "name": "List All Users (Admin Only)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Users retrieved successfully!');",
                  "        console.log('üìä Total Users:', response.data.users.length);",
                  "        console.log('üëë Admin access confirmed');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get users failed:', pm.response.text());",
                  "    if (pm.response.code === 403) {",
                  "        console.log('üö´ Access denied - Admin role required');",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Change User Role (Admin Only)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"organizer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/role",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "role"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ User role changed successfully!');",
                  "        console.log('üë§ New Role:', response.data.user.role);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Role change failed:', pm.response.text());",
                  "    if (pm.response.code === 403) {",
                  "        console.log('üö´ Access denied - Admin role required');",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete User (Admin Only)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ User deleted successfully!');",
                  "} else {",
                  "    console.log('‚ùå User deletion failed:', pm.response.text());",
                  "    if (pm.response.code === 403) {",
                  "        console.log('üö´ Access denied - Admin role required');",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Platform Statistics (Admin Only)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/platform",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "platform"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Platform statistics retrieved!');",
                  "        console.log('üìä Total Users:', response.data.stats.totalUsers);",
                  "        console.log('üìÖ Total Events:', response.data.stats.totalEvents);",
                  "        console.log('üé´ Total Bookings:', response.data.stats.totalBookings);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get statistics failed:', pm.response.text());",
                  "    if (pm.response.code === 403) {",
                  "        console.log('üö´ Access denied - Admin role required');",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîê OAuth Integration",
      "item": [
        {
          "name": "Get OAuth Authorization URL",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/oauth/authorization-url?provider=google&redirectUri=https://example.com/callback",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "oauth", "authorization-url"],
              "query": [
                {
                  "key": "provider",
                  "value": "google"
                },
                {
                  "key": "redirectUri",
                  "value": "https://example.com/callback"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ OAuth URL generated successfully!');",
                  "        console.log('üîó Authorization URL:', response.data.authorizationUrl);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå OAuth URL generation failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "OAuth Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"provider\": \"google\",\n  \"code\": \"your-oauth-code-here\",\n  \"redirectUri\": \"https://example.com/callback\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/oauth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "oauth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "        console.log('‚úÖ OAuth login successful!');",
                  "        console.log('üë§ User ID:', response.data.user.id);",
                  "        console.log('üîë Access Token:', response.data.accessToken.substring(0, 20) + '...');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå OAuth login failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìä Analytics",
      "item": [
        {
          "name": "Get Event Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "events", "{{eventId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Event analytics retrieved successfully!');",
                  "        console.log('üìä Total Bookings:', response.data.analytics.totalBookings);",
                  "        console.log('üí∞ Revenue:', response.data.analytics.totalRevenue);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get analytics failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîç Search",
      "item": [
        {
          "name": "Search Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/search/events?q=technology&category=technology&location=Test City",
              "host": ["{{baseUrl}}"],
              "path": ["search", "events"],
              "query": [
                {
                  "key": "q",
                  "value": "technology"
                },
                {
                  "key": "category",
                  "value": "technology"
                },
                {
                  "key": "location",
                  "value": "Test City"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Search completed successfully!');",
                  "        console.log('üîç Search Results:', response.data.events.length);",
                  "        console.log('üìÑ Page:', response.data.pagination.page);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Search failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üì± Mobile API Endpoints",
      "item": [
        {
          "name": "Mobile Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "EventMO Mobile App"
              },
              {
                "key": "X-Client-Type",
                "value": "mobile"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"tkhtechinc@gmail.com\",\n  \"password\": \"Campus2020$\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "        console.log('‚úÖ Mobile login successful!');",
                  "        console.log('üë§ User ID:', response.data.user.id);",
                  "        console.log('üì± Mobile-optimized response received');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Mobile login failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Mobile Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "EventMO Mobile App"
              },
              {
                "key": "X-Client-Type",
                "value": "mobile"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"tkhtechinc@gmail.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Mobile password reset request successful!');",
                  "        console.log('üìß Check email for reset link');",
                  "        console.log('üí° Reset token logged in CloudWatch for development');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Mobile password reset failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
