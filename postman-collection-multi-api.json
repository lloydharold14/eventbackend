{
  "info": {
    "name": "Event Management Platform - Multi-API Collection",
    "description": "Complete test suite with correct API Gateway URLs for each service (Events, Bookings, Payments, QR Codes, Analytics)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "mainApiUrl",
      "value": "https://r2nbmrglq6.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Main API Gateway (Health Check only)"
    },
    {
      "key": "eventsApiUrl",
      "value": "https://a5sma74inf.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Events API Gateway"
    },
    {
      "key": "bookingsApiUrl",
      "value": "https://bxmcilkslg.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Bookings API Gateway"
    },
    {
      "key": "paymentsApiUrl",
      "value": "https://rmjz94rovg.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Payments API Gateway"
    },
    {
      "key": "qrCodesApiUrl",
      "value": "https://tvww3bv8t5.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "QR Codes API Gateway"
    },
    {
      "key": "analyticsApiUrl",
      "value": "https://9l0qlqw46a.execute-api.ca-central-1.amazonaws.com/dev",
      "type": "string",
      "description": "Analytics API Gateway"
    },
    {
      "key": "userPoolId",
      "value": "ca-central-1_NgK0SDL4T",
      "type": "string"
    },
    {
      "key": "userPoolClientId",
      "value": "2bbu335cjoe2afm71kjedbn86l",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "",
      "type": "string"
    },
    {
      "key": "bookingId",
      "value": "",
      "type": "string"
    },
    {
      "key": "verificationToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userEmail",
      "value": "tkhtechinc@gmail.com",
      "type": "string"
    },
    {
      "key": "username",
      "value": "tkhtechinc",
      "type": "string"
    },
    {
      "key": "userRole",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "üîç Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mainApiUrl}}/health",
              "host": ["{{mainApiUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ API is healthy!');",
                  "        console.log('üè• Status:', response.data.status);",
                  "        console.log('üåç Environment:', response.data.environment);",
                  "        console.log('‚è±Ô∏è Response Time:', response.data.overallResponseTime + 'ms');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Health check failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìÖ Events API (Public)",
      "item": [
        {
          "name": "Get All Events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{eventsApiUrl}}/events?page=1&limit=10",
              "host": ["{{eventsApiUrl}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Events retrieved successfully!');",
                  "        console.log('üìä Total Events:', response.data.events.length);",
                  "        console.log('üìÑ Page:', response.data.pagination.page);",
                  "        console.log('üìã Total Pages:', response.data.pagination.totalPages);",
                  "        ",
                  "        // Set first event ID for testing",
                  "        if (response.data.events.length > 0) {",
                  "            pm.collectionVariables.set('eventId', response.data.events[0].id);",
                  "            console.log('üéØ First Event ID set:', response.data.events[0].id);",
                  "        }",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get events failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Event by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{eventsApiUrl}}/events/{{eventId}}",
              "host": ["{{eventsApiUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Event retrieved successfully!');",
                  "        console.log('üìÖ Title:', response.data.event.title);",
                  "        console.log('üìç Location:', response.data.event.location.city);",
                  "        console.log('üí∞ Price Range:', response.data.event.pricing[0].price + ' - ' + response.data.event.pricing[response.data.event.pricing.length-1].price + ' ' + response.data.event.pricing[0].currency);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get event failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîî Notifications API (Public)",
      "item": [
        {
          "name": "Notification Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mainApiUrl}}/notifications/health",
              "host": ["{{mainApiUrl}}"],
              "path": ["notifications", "health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Notifications service is healthy!');",
                  "} else {",
                  "    console.log('‚ùå Notifications health check failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },



    {
      "name": "üë§ User Management (Authentication)",
      "item": [
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"Campus2020$\"\n}"
            },
            "url": {
              "raw": "{{mainApiUrl}}/auth/login",
              "host": ["{{mainApiUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
                  "        pm.collectionVariables.set('userId', response.data.user.id);",
                  "        pm.collectionVariables.set('userRole', response.data.user.role);",
                  "        console.log('‚úÖ Login successful!');",
                  "        console.log('üë§ User ID:', response.data.user.id);",
                  "        console.log('üé≠ Role:', response.data.user.role);",
                  "        console.log('üîë Access Token saved');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Login failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{mainApiUrl}}/users/profile",
              "host": ["{{mainApiUrl}}"],
              "path": ["users", "profile"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('‚úÖ Profile retrieved successfully!');",
                  "        console.log('üë§ User:', response.data.user.firstName + ' ' + response.data.user.lastName);",
                  "        console.log('üìß Email:', response.data.user.email);",
                  "        console.log('üé≠ Role:', response.data.user.role);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Get profile failed:', pm.response.text());",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üß™ Testing Instructions",
      "item": [
        {
          "name": "üìã How to Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mainApiUrl}}/health",
              "host": ["{{mainApiUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üéØ TESTING INSTRUCTIONS:');",
                  "console.log('');",
                  "console.log('üîê AUTHENTICATION WORKFLOW:');",
                  "console.log('1. üë§ Login User - Use your credentials to get access token');",
                  "console.log('2. üîë Token automatically saved to collection variables');",
                  "console.log('3. üë§ Get User Profile - Verify authentication works');",
                  "console.log('');",
                  "console.log('üì± API TESTING ORDER:');",
                  "console.log('1. üîç Health Check - should work without auth');",
                  "console.log('2. üìÖ Events API - Get All Events should work without auth');",
                  "console.log('3. üîî Notifications Health - should work without auth');",
                  "console.log('4. üë§ User Profile - needs authentication');",
                  "console.log('');",
                  "console.log('‚úÖ Public endpoints: Health Check, Events, Notifications');",
                  "console.log('üîê Protected endpoints: User Profile');",
                  "console.log('');",
                  "console.log('üìù CURRENTLY AVAILABLE ENDPOINTS:');",
                  "console.log('   - Main API: ' + pm.collectionVariables.get('mainApiUrl'));",
                  "console.log('   - Events API: ' + pm.collectionVariables.get('eventsApiUrl'));",
                  "console.log('');",
                  "console.log('üí° TIP: Run Login User first to get your access token!');",
                  "console.log('‚ö†Ô∏è  NOTE: Other services (Bookings, Payments, QR Codes, Analytics)');",
                  "console.log('   are in separate API Gateways and need additional configuration');"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
