openapi: 3.0.3
info:
  title: Event Management Platform API
  description: |
    Comprehensive API for the Event Management Platform with User Management, Event Management, and OAuth 2.0 integration.
    
    ## Features
    - User registration and authentication
    - OAuth 2.0 integration (Google, Facebook, Apple, Microsoft, GitHub)
    - Event creation and management
    - Event categories and media management
    - Admin functions and user management
    
    ## Authentication
    - JWT token-based authentication
    - OAuth 2.0 social login
    - Role-based access control
    
    ## Base URL
    - Development: `https://r2nbmrglq6.execute-api.ca-central-1.amazonaws.com/dev`
    - Production: `https://api.eventplatform.com`
  version: 1.0.0
  contact:
    name: Event Platform Team
    email: support@eventplatform.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://r2nbmrglq6.execute-api.ca-central-1.amazonaws.com/dev
    description: Development Environment
  - url: https://api.eventplatform.com
    description: Production Environment

security:
  - BearerAuth: []
  - OAuth2: []

paths:
  # Health Check
  /health:
    get:
      summary: Health Check
      description: Check the health status of the API
      tags: [System]
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: "event-management-platform"
                  version:
                    type: string
                    example: "1.0.0"

  # Authentication Endpoints
  /auth/register:
    post:
      summary: Register a new user
      description: |
        Create a new user account with email verification.
        
        **Role Options:**
        - `attendee` (default) - Can book events
        - `organizer` - Can create and manage events
        - `admin` - Full platform access
        
        **Examples:**
        
        **Attendee Registration:**
        ```json
        {
          "email": "attendee@example.com",
          "username": "attendee123",
          "password": "TestPassword123!",
          "firstName": "John",
          "lastName": "Doe",
          "phone": "+1234567890",
          "acceptTerms": true,
          "marketingConsent": false
        }
        ```
        
        **Organizer Registration:**
        ```json
        {
          "email": "organizer@example.com",
          "username": "organizer123",
          "password": "TestPassword123!",
          "firstName": "Jane",
          "lastName": "Smith",
          "phone": "+1234567891",
          "acceptTerms": true,
          "marketingConsent": true,
          "role": "organizer"
        }
        ```
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, username, password, firstName, lastName, acceptTerms]
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "johndoe"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePassword123!"
                firstName:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "John"
                lastName:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "Doe"
                phoneNumber:
                  type: string
                  pattern: "^\\+?[\\d\\s\\-\\(\\)]{10,}$"
                  example: "+1234567890"
                dateOfBirth:
                  type: string
                  format: date
                  example: "1990-01-01"
                acceptTerms:
                  type: boolean
                  example: true
                marketingConsent:
                  type: boolean
                  example: false
                role:
                  type: string
                  enum: [admin, organizer, attendee]
                  default: attendee
                  example: "organizer"
                  description: "User role - 'attendee' (default), 'organizer', or 'admin'"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "SecurePassword123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using refresh token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # OAuth Endpoints
  /auth/oauth/login:
    post:
      summary: OAuth login
      description: Authenticate user with OAuth provider
      tags: [OAuth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [provider, code]
              properties:
                provider:
                  type: string
                  enum: [google, facebook, apple, microsoft, github]
                  example: "google"
                code:
                  type: string
                  example: "4/0AfJohXn..."
      responses:
        '200':
          description: OAuth login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid OAuth code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/oauth/authorization-url:
    get:
      summary: Get OAuth authorization URL
      description: Get the authorization URL for OAuth provider
      tags: [OAuth]
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            type: string
            enum: [google, facebook, apple, microsoft, github]
          example: "google"
        - name: redirectUri
          in: query
          required: true
          schema:
            type: string
          example: "https://app.eventplatform.com/oauth/callback"
      responses:
        '200':
          description: Authorization URL generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorizationUrl:
                    type: string
                    example: "https://accounts.google.com/oauth/authorize?client_id=..."

  # User Profile Endpoints
  /users/profile:
    get:
      summary: Get user profile
      description: Get the current user's profile information
      tags: [User Profile]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user profile
      description: Update the current user's profile information
      tags: [User Profile]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # OAuth Account Management
  /users/oauth/link:
    post:
      summary: Link OAuth account
      description: Link an OAuth provider account to the current user
      tags: [OAuth]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [provider, code]
              properties:
                provider:
                  type: string
                  enum: [google, facebook, apple, microsoft, github]
                  example: "google"
                code:
                  type: string
                  example: "4/0AfJohXn..."
      responses:
        '200':
          description: OAuth account linked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /users/oauth/unlink:
    post:
      summary: Unlink OAuth account
      description: Unlink an OAuth provider account from the current user
      tags: [OAuth]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [provider]
              properties:
                provider:
                  type: string
                  enum: [google, facebook, apple, microsoft, github]
                  example: "google"
      responses:
        '200':
          description: OAuth account unlinked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /users/oauth/accounts:
    get:
      summary: Get linked OAuth accounts
      description: Get all OAuth accounts linked to the current user
      tags: [OAuth]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Linked OAuth accounts retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        provider:
                          type: string
                          example: "google"
                        providerUserId:
                          type: string
                          example: "123456789"
                        linkedAt:
                          type: string
                          format: date-time

  # Event Endpoints
  /events:
    get:
      summary: List events
      description: Get a list of events with optional filtering
      tags: [Events]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: category
          in: query
          schema:
            type: string
          example: "conference"
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, cancelled, completed]
          example: "published"
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      summary: Create event
      description: Create a new event
      tags: [Events]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}:
    get:
      summary: Get event by ID
      description: Get detailed information about a specific event
      tags: [Events]
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update event
      description: Update an existing event
      tags: [Events]
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '403':
          description: Not authorized to update this event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete event
      description: Delete an event
      tags: [Events]
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: Event deleted successfully
        '403':
          description: Not authorized to delete this event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Admin Endpoints
  /admin/users:
    get:
      summary: List all users (Admin only)
      description: Get a list of all users in the system
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: role
          in: query
          schema:
            type: string
            enum: [attendee, organizer, admin]
          example: "organizer"
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/oauth/authorize
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            openid: OpenID Connect
            email: Email access
            profile: Profile access

  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Validation failed"
            details:
              type: array
              items:
                type: object
        timestamp:
          type: string
          format: date-time

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              $ref: '#/components/schemas/TokenPair'
        timestamp:
          type: string
          format: date-time

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    TokenPair:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          example: 3600

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          example: "johndoe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: [attendee, organizer, admin]
          example: "attendee"
        status:
          type: string
          enum: [pending_verification, active, suspended, deleted]
          example: "active"
        emailVerified:
          type: boolean
          example: true
        phoneVerified:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserProfile:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            phone:
              type: string
              example: "+1234567890"
            dateOfBirth:
              type: string
              format: date
              example: "1990-01-01"
            bio:
              type: string
              example: "Event enthusiast and organizer"
            preferences:
              type: object
              properties:
                emailNotifications:
                  type: boolean
                  example: true
                smsNotifications:
                  type: boolean
                  example: false
                newsletter:
                  type: boolean
                  example: true

    UpdateUserProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          minLength: 2
          maxLength: 50
        phone:
          type: string
        dateOfBirth:
          type: string
          format: date
        bio:
          type: string
          maxLength: 500
        preferences:
          type: object
          properties:
            emailNotifications:
              type: boolean
            smsNotifications:
              type: boolean
            newsletter:
              type: boolean

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Tech Conference 2024"
        description:
          type: string
          example: "Join us for the biggest tech conference of the year"
        slug:
          type: string
          example: "tech-conference-2024"
        organizerId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        categoryId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        status:
          type: string
          enum: [draft, published, cancelled, completed]
          example: "published"
        startDate:
          type: string
          format: date-time
          example: "2024-06-15T09:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2024-06-15T17:00:00Z"
        location:
          type: object
          properties:
            address:
              type: string
              example: "123 Main St, City, State"
            city:
              type: string
              example: "San Francisco"
            state:
              type: string
              example: "CA"
            country:
              type: string
              example: "USA"
            coordinates:
              type: object
              properties:
                latitude:
                  type: number
                  example: 37.7749
                longitude:
                  type: number
                  example: -122.4194
        maxAttendees:
          type: integer
          example: 500
        currentAttendees:
          type: integer
          example: 150
        pricing:
          type: array
          items:
            type: object
            properties:
              tier:
                type: string
                example: "Early Bird"
              price:
                type: number
                example: 99.99
              currency:
                type: string
                example: "USD"
              available:
                type: integer
                example: 100
        tags:
          type: array
          items:
            type: string
          example: ["technology", "conference", "networking"]
        media:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              type:
                type: string
                enum: [image, video, document]
              url:
                type: string
              filename:
                type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateEventRequest:
      type: object
      required: [title, description, startDate, endDate, maxAttendees]
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
          example: "Tech Conference 2024"
        description:
          type: string
          maxLength: 5000
          example: "Join us for the biggest tech conference of the year"
        categoryId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        startDate:
          type: string
          format: date-time
          example: "2024-06-15T09:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2024-06-15T17:00:00Z"
        location:
          type: object
          properties:
            address:
              type: string
              example: "123 Main St, City, State"
            city:
              type: string
              example: "San Francisco"
            state:
              type: string
              example: "CA"
            country:
              type: string
              example: "USA"
            coordinates:
              type: object
              properties:
                latitude:
                  type: number
                  example: 37.7749
                longitude:
                  type: number
                  example: -122.4194
        maxAttendees:
          type: integer
          minimum: 1
          maximum: 100000
          example: 500
        pricing:
          type: array
          items:
            type: object
            required: [tier, price, currency]
            properties:
              tier:
                type: string
                example: "Early Bird"
              price:
                type: number
                minimum: 0
                example: 99.99
              currency:
                type: string
                example: "USD"
              available:
                type: integer
                minimum: 1
                example: 100
        tags:
          type: array
          items:
            type: string
          example: ["technology", "conference", "networking"]

    UpdateEventRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 5000
        categoryId:
          type: string
          format: uuid
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          type: object
          properties:
            address:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
            coordinates:
              type: object
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
        maxAttendees:
          type: integer
          minimum: 1
          maximum: 100000
        pricing:
          type: array
          items:
            type: object
            properties:
              tier:
                type: string
              price:
                type: number
                minimum: 0
              currency:
                type: string
              available:
                type: integer
                minimum: 1
        tags:
          type: array
          items:
            type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: OAuth
    description: OAuth 2.0 social login integration
  - name: User Profile
    description: User profile management
  - name: Events
    description: Event creation and management
  - name: Admin
    description: Administrative functions (admin only)
